<template>
  <view
    class="container"
    :style="{ height: ` ${webviewHeight}px`, width: `${webviewWidth}px` }" 
  >
  
    <web-view
      class="web-view"
       :style="{ height: ` ${webviewHeight}px`, width: `${webviewWidth}px` }"
      src="https://live.ofmtvu.com/"
    ></web-view>
  </view>
</template>

<script>
export default {
  // v-if="webviewHeight"
  // <!-- :style="{ height: ` ${webviewHeight}px`, width: `${webviewWidth}px` }" -->
  //  <!-- :style="{ height: ` ${webviewHeight}px`, width: `${webviewWidth}px` }" -->
  components: {},
  data() {
    return {
      webviewHeight: 0,
      webviewWidth: 300,
    };
  },
  computed: {},
  mounted() {
    this.setWebviewStyle();
  },
  created: function () {},
  methods: {
    setWebviewStyle() {
      const systemInfo = uni.getSystemInfoSync();
      const platform = systemInfo.platform;

      const statusBarHeight = systemInfo.statusBarHeight || 0;
      const navBarHeight = 81; // 如果你有自定义导航栏，填它的高度
      const bottomSafeAreaHeight = systemInfo.safeAreaInsets?.bottom || 0;

      // windowHeight 是除去状态栏、导航栏、虚拟按键后的可视高度，推荐基础值
      let availableHeight = systemInfo.windowHeight;

      // Android 特有：虚拟导航栏（如有）可能未被 windowHeight 剔除
      if (platform === 'android') {
        const virtualKeyHeight = Math.max(
          systemInfo.screenHeight - systemInfo.windowHeight,
          0
        );
        availableHeight -= virtualKeyHeight;
      }

      // 如果你的页面顶部用了自定义导航栏，还需要减去
      availableHeight -= navBarHeight + bottomSafeAreaHeight + statusBarHeight;

      this.webviewHeight = availableHeight;
      this.webviewWidth = systemInfo.windowWidth;
    },
  },
};
</script>